{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Read Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Senator</th>\n",
       "      <th>State</th>\n",
       "      <th>Article1</th>\n",
       "      <th>Article2</th>\n",
       "      <th>Guilt</th>\n",
       "      <th>Party</th>\n",
       "      <th>Conservatism</th>\n",
       "      <th>Clinton</th>\n",
       "      <th>Reelection</th>\n",
       "      <th>FirstTerm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>shelby</td>\n",
       "      <td>AL</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>92</td>\n",
       "      <td>43</td>\n",
       "      <td>2004</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sessions</td>\n",
       "      <td>AL</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>43</td>\n",
       "      <td>2002</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>murkowsk</td>\n",
       "      <td>AK</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>68</td>\n",
       "      <td>34</td>\n",
       "      <td>2004</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>stevens</td>\n",
       "      <td>AK</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>34</td>\n",
       "      <td>2002</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>kyl</td>\n",
       "      <td>AZ</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>96</td>\n",
       "      <td>47</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Senator State  Article1  Article2  Guilt  Party  Conservatism  Clinton  \\\n",
       "0    shelby    AL         0         1      1      1            92       43   \n",
       "1  sessions    AL         1         1      2      1           100       43   \n",
       "2  murkowsk    AK         1         1      2      1            68       34   \n",
       "3   stevens    AK         0         1      1      1            58       34   \n",
       "4       kyl    AZ         1         1      2      1            96       47   \n",
       "\n",
       "   Reelection  FirstTerm  \n",
       "0        2004          0  \n",
       "1        2002          1  \n",
       "2        2004          0  \n",
       "3        2002          0  \n",
       "4        2000          1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read and display csv data\n",
    "impeach_df = pd.read_csv(\"impeach.csv\")\n",
    "impeach_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What state did Daniel Patrick Moynahan represent?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set index as Senator\n",
    "impeach_df.index = impeach_df[\"Senator\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Senator         moynihan\n",
       "State                 NY\n",
       "Article1               0\n",
       "Article2               0\n",
       "Guilt                  0\n",
       "Party                  0\n",
       "Conservatism          12\n",
       "Clinton               59\n",
       "Reelection          2000\n",
       "FirstTerm              0\n",
       "Name: moynihan, dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Search index for Moynihan\n",
    "impeach_df.loc[\"moynihan\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Daniel Patrick Moynihan represented NY.\n"
     ]
    }
   ],
   "source": [
    "# Answer\n",
    "print(\"Daniel Patrick Moynihan represented NY.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What was the standard deviation of the conservatism score for senators in 1998? (Hint: use the \"std\" command to get the standard deviation.) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The standard deviation of conservation score was 37.477992195285736\n"
     ]
    }
   ],
   "source": [
    "# Separate conservatism scores from original dataframe\n",
    "conservatism_score = impeach_df[\"Conservatism\"]\n",
    "\n",
    "# Get the standard deviation of the newly created dataframe\n",
    "std_conservatism = conservatism_score.std()\n",
    "\n",
    "# Answer\n",
    "print(\"The standard deviation of conservation score was \" + str(std_conservatism))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Which of Tennesse's two senators was ranked as more conservative in 1998: Thompson or Graham?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Senator         thompson\n",
       "State                 TN\n",
       "Article1               0\n",
       "Article2               1\n",
       "Guilt                  1\n",
       "Party                  1\n",
       "Conservatism          88\n",
       "Clinton               48\n",
       "Reelection          2002\n",
       "FirstTerm              1\n",
       "Name: thompson, dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get information on Thompson\n",
    "impeach_df.loc[\"thompson\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Senator         graham\n",
       "State               FL\n",
       "Article1             0\n",
       "Article2             0\n",
       "Guilt                0\n",
       "Party                0\n",
       "Conservatism         8\n",
       "Clinton             48\n",
       "Reelection        2004\n",
       "FirstTerm            0\n",
       "Name: graham, dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get information on Graham\n",
    "impeach_df.loc[\"graham\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Tennesse senator who ranked more conservative in 1998 was Senator Thompson with a Conservatism score of 88/100.\n"
     ]
    }
   ],
   "source": [
    "# Answer\n",
    "print(\"The Tennesse senator who ranked more conservative in 1998 was Senator Thompson with a Conservatism score of 88/100.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What percentage of the vote did Bill Clinton receive in New York in the 1996 election?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percentage of votes Bill Clinton received in New York was 79.19\n"
     ]
    }
   ],
   "source": [
    "# Filter dataframe to show only NY\n",
    "ny_filter = impeach_df[\"State\"] == \"NY\"\n",
    "impeach_df = impeach_df[ny_filter]\n",
    "\n",
    "# Divide the sum of Clinton's votes by the sum of all votes\n",
    "clinton_votes = sum(impeach_df[\"Clinton\"]) / (sum(impeach_df[\"Clinton\"]) + sum(impeach_df[\"Conservatism\"]))\n",
    "\n",
    "# Multiply answer above by 100 to get a percentage value\n",
    "clinton_percentage = \"{0:,.2f}\".format(clinton_votes * 100)\n",
    "\n",
    "# Answer\n",
    "print(\"The percentage of votes Bill Clinton received in New York was\", clinton_percentage)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Bonus**: Senator Kay Bailey Hutchison is not coded as \"hutchison\". Using any method, find the row that corresponds to Kay Bailey Hutchinson. Describe the method you used. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load a clean dataframe\n",
    "impeach_df = pd.read_csv(\"impeach.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['kaybhut']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find Senator name used for Senator Kay Bailey Hutchison\n",
    "kbh = [name for name in impeach_df[\"Senator\"] if \"kay\" in name]\n",
    "kbh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Senator</th>\n",
       "      <th>State</th>\n",
       "      <th>Article1</th>\n",
       "      <th>Article2</th>\n",
       "      <th>Guilt</th>\n",
       "      <th>Party</th>\n",
       "      <th>Conservatism</th>\n",
       "      <th>Clinton</th>\n",
       "      <th>Reelection</th>\n",
       "      <th>FirstTerm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>kaybhut</td>\n",
       "      <td>TX</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>92</td>\n",
       "      <td>44</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Senator State  Article1  Article2  Guilt  Party  Conservatism  Clinton  \\\n",
       "85  kaybhut    TX         1         1      2      1            92       44   \n",
       "\n",
       "    Reelection  FirstTerm  \n",
       "85        2000          1  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filter the dataframe to only show rows matching the senator name found above\n",
    "kbh_filter = impeach_df[\"Senator\"] == \"kaybhut\"\n",
    "impeach_df = impeach_df[kbh_filter]\n",
    "\n",
    "# print the dataframe to show the row\n",
    "impeach_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Senator Kay Bailey Hutchinson can be found under the name of 'kaybhut' in row 85.\n"
     ]
    }
   ],
   "source": [
    "# Answer\n",
    "print(\"Senator Kay Bailey Hutchinson can be found under the name of 'kaybhut' in row 85.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
